{"version":3,"sources":["serviceWorker.js","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","todoItems","push","index","value","done","TodoList","items","this","props","map","item","key","removeItem","markTodoDone","className","React","Component","TodoListItem","onClickClose","bind","onClickDone","parseInt","todoClass","aria-hidden","onClick","type","TodoForm","onSubmit","refs","itemName","focus","event","preventDefault","newItemValue","addItem","form","reset","ref","placeholder","TodoHeader","TodoApp","state","todoItem","unshift","length","setState","itemIndex","splice","todo","id","initItems","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.863d78ab.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';// eslint-disable-next-line\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nvar todoItems = [];\ntodoItems.push({index: 1, value: \"Work on React\", done: false});\ntodoItems.push({index: 2, value: \"Take a Shower\", done: true});\ntodoItems.push({index: 3, value: \"Go to the gym\", done: true});\n\nclass TodoList extends React.Component {\n  render () {\n    var items = this.props.items.map((item, index) => {\n      return (\n        <TodoListItem key={index} item={item} index={index} removeItem={this.props.removeItem} markTodoDone={this.props.markTodoDone} />\n      );\n    });\n    return (\n      <ul className=\"list-group\"> {items} </ul>\n    );\n  }\n}\n  \nclass TodoListItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onClickClose = this.onClickClose.bind(this);\n    this.onClickDone = this.onClickDone.bind(this);\n  }\n  onClickClose() {\n    var index = parseInt(this.props.index);\n    this.props.removeItem(index);\n  }\n  onClickDone() {\n    var index = parseInt(this.props.index);\n    this.props.markTodoDone(index);\n  }\n  render () {\n    var todoClass = this.props.item.done ? \n        \"done\" : \"undone\";\n    return(\n      <li className=\"list-group-item \">\n        <div className={todoClass}>\n          <span className=\"glyphicon glyphicon-ok icon\" aria-hidden=\"true\" onClick={this.onClickDone}></span>\n          {this.props.item.value}\n          <button type=\"button\" className=\"close\" onClick={this.onClickClose}>&times;</button>\n        </div>\n      </li>     \n    );\n  }\n}\n\nclass TodoForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n  componentDidMount() {\n    this.refs.itemName.focus();\n  }\n  onSubmit(event) {\n    event.preventDefault();\n    var newItemValue = this.refs.itemName.value;\n    \n    if(newItemValue) {\n      this.props.addItem({newItemValue});\n      this.refs.form.reset();\n    }\n  }\n  render () {\n    return (\n      <form ref=\"form\" onSubmit={this.onSubmit} className=\"form-inline\">\n        <input type=\"text\" ref=\"itemName\" className=\"form-control\" placeholder=\"NEW TASK\"/>\n        <button type=\"submit\" className=\"btn\">Add</button> \n      </form>\n    );   \n  }\n}\n  \nclass TodoHeader extends React.Component {\n  render () {\n    return <h1>Today's To-Do List:</h1>;\n  }\n}\n  \nclass TodoApp extends React.Component {\n  constructor (props) {\n    super(props);\n    this.addItem = this.addItem.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n    this.markTodoDone = this.markTodoDone.bind(this);\n    this.state = {todoItems: todoItems};\n  }\n  addItem(todoItem) {\n    todoItems.unshift({\n      index: todoItems.length+1, \n      value: todoItem.newItemValue, \n      done: false\n    });\n    this.setState({todoItems: todoItems});\n  }\n  removeItem (itemIndex) {\n    todoItems.splice(itemIndex, 1);\n    this.setState({todoItems: todoItems});\n  }\n  markTodoDone(itemIndex) {\n    var todo = todoItems[itemIndex];\n    todoItems.splice(itemIndex, 1);\n    todo.done = !todo.done;\n    todo.done ? todoItems.push(todo) : todoItems.unshift(todo);\n    this.setState({todoItems: todoItems});  \n  }\n  render() {\n    return (\n      <div id=\"main\">\n        <TodoHeader />\n        <TodoForm addItem={this.addItem} />\n        <TodoList items={this.props.initItems} removeItem={this.removeItem} markTodoDone={this.markTodoDone}/>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<TodoApp initItems={todoItems}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}